package plic.analyse ;

import java.util.*;
import plic.arbre.* ;
import plic.arbre.expression.* ;
import plic.arbre.expression.binaire.*;
import plic.arbre.expression.binaire.comparaison.*;
import plic.arbre.expression.binaire.logique.*;
import plic.arbre.expression.unaire.*;
import plic.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {: 
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;
    
        lesTerminaux.put(new Integer(CodesLexicaux.PLUS), "+") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MOINS), "-") ;
        lesTerminaux.put(new Integer(CodesLexicaux.MULT), "*") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIV), "/") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PAROUV), "(") ;
        lesTerminaux.put(new Integer(CodesLexicaux.PARFER), ")") ;
        lesTerminaux.put(new Integer(CodesLexicaux.SUP), ">") ;
        lesTerminaux.put(new Integer(CodesLexicaux.INF), "<") ;
        lesTerminaux.put(new Integer(CodesLexicaux.EGALEGAL), "==") ;
        lesTerminaux.put(new Integer(CodesLexicaux.DIFF), "!=") ;
        lesTerminaux.put(new Integer(CodesLexicaux.ET), "et") ;
        lesTerminaux.put(new Integer(CodesLexicaux.OU), "ou") ;
        lesTerminaux.put(new Integer(CodesLexicaux.NON), "non") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {                
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)                    
                    m.append(" colonne : " + (s.right+1)) ;
            }
            
            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CONSTANTEINT, "" + s.value) ;
                lesTerminaux.put(CodesLexicaux.CONSTANTEBOOL, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};
   
/* ------------Declaration of Terminals and Non Terminals Section----------- */
   
/* Terminals (tokens returned by the scanner).  */

terminal Symbol    MCCLASSE;	//mot cle classe
terminal Symbol    PUBLIQUE, PRIVEE; //statut
terminal Symbol    ENTIER;	//type
terminal Symbol	   DEBUT, FIN;	//mot cle debut et fin

terminal Symbol    PLUS, MOINS, MULT, DIV, PAROUV, PARFER ;
terminal Symbol    SUP, INF, EGALEGAL, DIFF, ET, OU, NON ;
terminal Symbol	   EGAL;
terminal Symbol	   MCECRIRE;
terminal Symbol	   POINTVIRGULE, VIRGULE;
terminal String    IDF, CONSTANTEINT, CONSTANTEBOOL, CONSTANTECHAINE ;
   
/* Non terminals used in the grammar section.  */

non terminal ArbreAbstrait SYSTEME ;
non terminal ArbreAbstrait CLASSE;
non terminal BlocDInstructions LDECL DECLARATION, DECL_CHAMP, DECL_CONST;
non terminal ArrayList<String> L_IDF;
non terminal ArbreAbstrait INSTRUCTION, 
non terminal Affectation AFFECT; 
non terminal Ecriture ECRIRE;
non terminal Expression STATUT, TYPE;
non terminal Expression EXPR, CSTE, ACCES;

precedence left INF, SUP ;
precedence left EGALEGAL, DIFF;
precedence left PLUS, MOINS;
precedence left MULT, DIV ;
precedence left OU ;
precedence left ET ;
precedence left NON ;

/* ----------------------------Grammar Section-------------------- */
 
start with SYSTEME ;

SYSTEME ::= 	CLASSE:c
				{: BlocDInstructions arbre = new BlocDInstructions() ;
                   arbre.ajouter(c) ;
                   RESULT = arbre ; :}
                ;

CLASSE  ::= 	MCCLASSE IDF:i LDECL:l FIN
				{: RESULT = l; :}
		|
				MCCLASSE IDF FIN
				{: RESULT = new BlocDInstructions(); :}
				;
				
LDECL   ::=		DECLARATION:d
				{: RESULT = d; :}
        |
        		LDECL:l DECLARATION:d
        		{: l.ajouter(d);
        		   RESULT = l; :}  
        		;

DECLARATION ::=	DECL_CHAMP:d
				{: RESULT = d; :}
		|
				DECL_CONST:c
				{: RESULT = c; :}
				;
				
DECL_CHAMP 	::=	STATUT TYPE IDF POINTVIRGULE 
				{: :} //ajouter l'identifiant à la tds je crois...?
			|	STATUT TYPE L_IDF:li POINTVIRGULE
				{: for(String s : li){
						;
				   } 
				   RESULT = null; :} 
				;
				
L_IDF		::= IDF:i
				{: ArrayList<String> als = new ArrayList<>(); 
				   als.add(i);
				   RESULT = als; :}
			|
				L_IDF:li IDF:i
				{: li.add(i);
				   RESULT = li; :}
				;
				
DECL_CONST	::= INSTRUCTION:i
				{: BlocDInstructions bdi = new BlocDInstructions(); 
				   bdi.ajouter(i);
				   RESULT = bdi; :}
		|
				DECL_CONST:d INSTRUCTION:i
				{: d.ajouter(i);
				   RESULT = d; :}
				;
				
INSTRUCTION ::= AFFECT:a
				{: RESULT = a; :}
		|
				ECRIRE:e
				{: RESULT = e; :}
				;
				
AFFECT	::=		ACCES:a EGAL EXPR:e POINTVIRGULE
				{: RESULT = new Affectation(a, e); :}
				;
				
ECRIRE 	::=		MCECRIRE EXPR:e
				{: RESULT = new EcritureExpr(e); :}
		|
				MCECRIRE CONSTANTECHAINE:c
				{: RESULT = new EcritureChaine(c); :}
				;
    
STATUT  ::=		PUBLIQUE
		|		PRIVEE
				;

TYPE 	::=		ENTIER;

EXPR    ::=     EXPR:g  PLUS  EXPR:d
                {: RESULT = new Plus(g, d) ; :}
        | 
                EXPR:g  MOINS  EXPR:d
                {: RESULT = new Moins(g, d); :}
        |                
                EXPR:g  MULT  EXPR:d
                {: RESULT = new Mult(g, d); :}
        |                
                EXPR:g  DIV  EXPR:d
                {: RESULT = new Div(g, d); :}
        |       
                EXPR:g  INF  EXPR:d
                {: RESULT = new Inferieur(g, d); :}
        |       
                EXPR:g  SUP  EXPR:d
                {: RESULT = new Superieur(g, d); :}
        |              
                EXPR:g  EGALEGAL  EXPR:d
                {: RESULT = new Egal(g, d); :}
        |       
                EXPR:g  DIFF  EXPR:d
                {: RESULT = new Different(g, d); :}
        |                      
                MOINS  EXPR:e  
                {: RESULT = new MoinsUnaire(e); :}
        |      
                EXPR:g  ET  EXPR:d
                {: RESULT = new EtLogique(g, d); :}
        |      
                EXPR:g  OU  EXPR:d
                {: RESULT = new OuLogique(g, d); :}
        |      
                NON EXPR:e
                {: RESULT = new NonLogique(e); :}
        |
				ACCES:a
				{: RESULT = a :}
		|
                CSTE:c
                {: RESULT = c ; :}
        |
                PAROUV  EXPR:e  PARFER
                {: RESULT = e ; :}
                ;

ACCES	::=		IDF:i
				{: RESULT = new Acces(i); :}
				;

CSTE    ::=     CONSTANTEINT:e 
                {: RESULT = new ConstanteEntiere(e) ; :}
        |       CONSTANTEBOOL:e 
                {: RESULT = new ConstanteBool(e) ; :}
                ;